# Generated by Django 5.2.3 on 2025-06-28 09:10

import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('slug', models.SlugField(max_length=128, verbose_name='Key')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('slug', models.SlugField(max_length=64, verbose_name='Key')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Question text')),
                ('question_type', models.CharField(choices=[('simple', 'Simple answer'), ('multiple', 'Multiple answer')], default='simple', max_length=64, verbose_name='Question type')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Price')),
                ('duration_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration days')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is default')),
                ('is_unlimited', models.BooleanField(default=False, verbose_name='Is unlimited')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=128, unique=True, verbose_name='email')),
                ('username', models.CharField(max_length=128, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(max_length=128, verbose_name='First name')),
                ('last_name', models.CharField(max_length=128, verbose_name='Last name')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='core/models/users/', verbose_name='Avatar')),
                ('google_avatar', models.URLField(blank=True, null=True, verbose_name='Google avatar')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('default', 'User'), ('student', 'Student'), ('teacher', 'Teacher')], default='default', max_length=64, verbose_name='Account type')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('gender', models.CharField(choices=[('undefined', 'Undefined'), ('male', 'Male'), ('female', 'Female')], default='undefined', max_length=64, verbose_name='Gender')),
                ('bio', models.TextField(blank=True, max_length=255, null=True, verbose_name='Bio')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('poster', models.ImageField(blank=True, null=True, upload_to='core/models/courses/', verbose_name='Poster')),
                ('about', models.TextField(blank=True, null=True, verbose_name='About')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('last_update', models.DateField(auto_now=True, verbose_name='Last update')),
                ('rating', models.DecimalField(decimal_places=1, default=0, max_digits=2, verbose_name='Rating')),
                ('authors', models.ManyToManyField(blank=True, related_name='courses', to=settings.AUTH_USER_MODEL, verbose_name='Authors')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core.category', verbose_name='Category')),
                ('languages', models.ManyToManyField(blank=True, related_name='courses', to='core.language', verbose_name='Languages')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='core.course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Chapter',
                'verbose_name_plural': 'Chapters',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('about', models.TextField(blank=True, null=True, verbose_name='About')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Last update')),
                ('duration', models.PositiveSmallIntegerField(default=0, verbose_name='Duration (min)')),
                ('access', models.BooleanField(default=True, verbose_name='Access')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='core.chapter', verbose_name='Chapter')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='core.course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='LessonDocs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('file', models.FileField(blank=True, null=True, upload_to='core/models/lessons/docs/', verbose_name='File')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='docs', to='core.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Lesson doc',
                'verbose_name_plural': 'Lesson docs',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Answer text')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Is correct')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.question', verbose_name='Question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('slug', models.SlugField(max_length=128, verbose_name='Key')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('own', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_categories', to='core.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Subcategory',
                'verbose_name_plural': 'Subcategories',
                'ordering': ('order',),
            },
        ),
        migrations.AddField(
            model_name='course',
            name='sub_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_courses', to='core.subcategory', verbose_name='Subcategory'),
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='test', to='core.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
                'ordering': ('order',),
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.test', verbose_name='Test'),
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='core.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Text',
                'verbose_name_plural': 'Texts',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='UserCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('status', models.CharField(choices=[('no-started', 'No started'), ('in-progress', 'In progress'), ('finished', 'Finished')], default='no-started', max_length=64, verbose_name='Status')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is completed')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_courses', to='core.course', verbose_name='Course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_courses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User course',
                'verbose_name_plural': 'User courses',
            },
        ),
        migrations.CreateModel(
            name='UserChapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is completed')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chapters', to='core.chapter', verbose_name='Chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chapters', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chapters', to='core.usercourse', verbose_name='User course')),
            ],
            options={
                'verbose_name': 'User chapter',
                'verbose_name_plural': 'User chapters',
            },
        ),
        migrations.CreateModel(
            name='UserLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('status', models.CharField(choices=[('no-started', 'No started'), ('in-progress', 'In progress'), ('finished', 'Finished')], default='no-started', max_length=64, verbose_name='Status')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is completed')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_lessons', to='core.lesson', verbose_name='Lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_lessons', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_lessons', to='core.usercourse', verbose_name='User course')),
            ],
            options={
                'verbose_name': 'User lesson',
                'verbose_name_plural': 'User lessons',
                'ordering': ('lesson__order',),
            },
        ),
        migrations.CreateModel(
            name='UserPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('payment_date', models.DateTimeField(auto_now_add=True, verbose_name='Payment date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10, verbose_name='Status')),
                ('admin_note', models.TextField(blank=True, null=True, verbose_name='Admin note')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.subscription', verbose_name='Plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User payment',
                'verbose_name_plural': 'User payments',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True, verbose_name='Start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last update')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_subscriptions', to='core.subscription', verbose_name='Plan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User subscription',
                'verbose_name_plural': 'User subscriptions',
            },
        ),
        migrations.CreateModel(
            name='UserTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is completed')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='Submitted at')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_test', to='core.test', verbose_name='Test')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tests', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_test', to='core.userlesson', verbose_name='User lesson')),
            ],
            options={
                'verbose_name': 'User test',
                'verbose_name_plural': 'User tests',
                'ordering': ('test__order',),
            },
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='core.question', verbose_name='Question')),
                ('selected_answers', models.ManyToManyField(related_name='user_answers', to='core.answer', verbose_name='Selected answers')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='core.usertest', verbose_name='Test')),
            ],
            options={
                'verbose_name': 'User answer',
                'verbose_name_plural': 'User answers',
            },
        ),
        migrations.CreateModel(
            name='UserText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is completed')),
                ('text', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_text', to='core.text', verbose_name='Text')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_texts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_text', to='core.userlesson', verbose_name='User lesson')),
            ],
            options={
                'verbose_name': 'User text',
                'verbose_name_plural': 'User texts',
                'ordering': ('text__order',),
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_type', models.CharField(choices=[('youtube', 'YouTube'), ('vimeo', 'Vimeo')], default='youtube', max_length=64, verbose_name='URL type')),
                ('url', models.CharField(max_length=255, verbose_name='URL')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='video', to='core.lesson', verbose_name='Lesson')),
            ],
            options={
                'verbose_name': 'Video',
                'verbose_name_plural': 'Videos',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='UserVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score (%)')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Is completed')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_videos', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_video', to='core.userlesson', verbose_name='User lesson')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_video', to='core.video', verbose_name='Video')),
            ],
            options={
                'verbose_name': 'User video',
                'verbose_name_plural': 'User videos',
                'ordering': ('video__order',),
            },
        ),
    ]
